**Context:** You are an experienced Laravel developer with extensive knowledge in Docker. Below are the code files of a Laravel 10 LAMP app

**composer.json**
```json
{
  "$schema": "https://getcomposer.org/schema.json",
  "name": "laravel/laravel",
  "type": "project",
  "description": "The skeleton application for the Laravel framework.",
  "keywords": [
    "laravel",
    "framework"
  ],
  "license": "MIT",
  "require": {
    "php": "^8.2",
    "laravel/framework": "^11.31",
    "laravel/tinker": "^2.9",
    "peteconsuegra/wordpress-plus-laravel": "^4.2"
  },
  "require-dev": {
    "fakerphp/faker": "^1.23",
    "laravel/pail": "^1.1",
    "laravel/pint": "^1.13",
...
```

========================================

**.env**
```

APP_ENV=local
APP_DEBUG=true

CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_DRIVER=sync

MAIL_DRIVER=smtp
MAIL_HOST=mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null

DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=db_f1c72f2a
DB_USERNAME=u_ae85bd26
DB_PASSWORD=46e5003cbc6ef598

WP_LOAD_PATH=/var/www/html/wordpresspetepetelocalnet
WP_URL=http://wordpresspete.petelocal.net
APP_KEY=base64:W61adEUNFhuyI86vR8QDn+2MWGZcFN49KxxmLwAAOY4=

```

========================================

**resources/views/layout.blade.php**
```php
<!doctype html>
<html lang="{{ str_replace('http://dashboard.wordpresspete.petelocal.net/oupdates_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>WordPress Pete Dashboard</title>

    <!-- Bootstrap 5.3.7 & Icons (CDN) -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">

    <!-- Custom styles (optional) -->
    <style>

       /* Pete dashboard buttons */
.btn-pete {
    /* base state */
    --bs-btn-hover-color: #fff;   /* keep Bootstrap happy */
    --bs-btn-active-color: #fff;
    background-image: linear-gradient(135deg, #0D274D 0%, #003B24 100%);
    color: #fff;
    font-weight: 600;
    border: none;
    padding: 0.55rem 1.25rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 10px rgba(0,0,0,.25);
    transition: transform .15s ease, box-shadow .15s ease;
}

.btn-pete:hover,
.btn-pete:focus {
    /* keep the text white on rollover */
    color: #fff;                  /* <-- critical line */
    transform: translateY(-2px);
    box-shadow: 0 6px 14px rgba(0,0,0,.35);
    text-decoration: none;
}

.btn-pete:active {
    color: #fff;                  /* make sure it stays white when pressed */
    transform: translateY(0);
    box-shadow: 0 3px 8px rgba(0,0,0,.2);
}

        #sidebar {
             min-width: 180px;
        }
        /* Sidebar */
        .sidebar-link.active {
            background-color: #0D274D;
            font-weight: 600;
        }
        .sidebar-link i {
            width: 1.2rem;
        }
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
		.navbar{

			/* 1️⃣ Solid fallback for very old browsers */
			background-color: #0D274D;

			/* 2️⃣ Modern browsers */
			background-image: linear-gradient(90deg, #0D274D 0%, #003B24 100%);

			background-repeat: no-repeat;
			background-size: cover;
		}
        main {
            flex: 1 1 auto;
        }
    </style>

    @stack('head')
</head>
<body class="bg-light">

<!-- NAVBAR -->
<nav class="navbar navbar-expand-lg navbar-dark bg-primary sticky-top shadow-sm">
    <div class="container-fluid">
        <a class="navbar-brand d-flex align-items-center gap-2" href="/">
            Your Logo
        </a>

        <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#sidebar" aria-controls="sidebar" aria-label="Toggle sidebar">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse">
            <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                <li class="nav-item"><a class="nav-link" href="{{ $wordpress_url ?? '#' }}/my-account">My Account</a></li>
                <li class="nav-item"><a class="nav-link" href="/logout">Logout</a></li>
            </ul>
        </div>
    </div>
</nav>

<div class="d-flex">
    <!-- SIDEBAR -->
    <div class="offcanvas-lg offcanvas-start bg-white border-end" tabindex="-1" id="sidebar" aria-labelledby="sidebarLabel">
        <div class="offcanvas-header border-bottom">
            <h5 class="offcanvas-title" id="sidebarLabel">Menu</h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" data-bs-target="#sidebar" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body p-0">
            @php
                $roles = $roles ?? [];
            @endphp
            <nav class="list-group list-group-flush">
                @if(in_array('administrator', $roles, true))
                    <a href="/users"       class="list-group-item list-group-item-action sidebar-link @if($viewsw==='users') active @endif"><i class="bi bi-people"></i> WordPress Users</a>
                    <a href="/orders"      class="list-group-item list-group-item-action sidebar-link @if($viewsw==='orders') active @endif"><i class="bi bi-person-vcard"></i> WooCommerce Orders</a>
                    <a href="/subscriptions"       class="list-group-item list-group-item-action sidebar-link @if($viewsw==='subscriptions') active @endif"><i class="bi bi-gear"></i> WooCommerce Subscriptions</a>
                    <a href="/posts"    class="list-group-item list-group-item-action sidebar-link @if($viewsw==='posts') active @endif"><i class="bi bi-plug"></i> WordPress Posts</a>
                    <a href="/products"      class="list-group-item list-group-item-action sidebar-link @if($viewsw==='products') active @endif"><i class="bi bi-wordpress"></i> WooCommerce Products</a>
                @else
                    <a href="/my_subscriptions" class="list-group-item list-group-item-action sidebar-link @if($viewsw==='my_subscriptions') active @endif"><i class="bi bi-card-checklist"></i> My subscriptions</a>
                    <a href="/my_orders" class="list-group-item list-group-item-action sidebar-link @if($viewsw==='my_orders') active @endif"><i class="bi bi-card-checklist"></i> My Orders</a>
                @endif
            </nav>
        </div>
    </div>

    <!-- MAIN CONTENT -->
    <main class="flex-fill p-4">
        @yield('header')
        @yield('content')
    </main>
</div>

<!-- FOOTER -->
<footer class="py-3 bg-white border-top small text-center">
     Your Custom WordPress + Laravel Dashboard © . {{ now()->year }}
</footer>

<!-- JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js" integrity="sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q" crossorigin="anonymous"></script>
@stack('scripts')
</body>
</html>

```

========================================

**routes/web.php**
```php
<?php

use Illuminate\Support\Facades\Route;
use App\Models\PeteSync;
use App\Http\Controllers\DashboardController;
use App\Http\Controllers\AdminController;

Route::get('/', function (Request $request) {

    $logged_in_as = PeteSync::checkTheTypeOfLoggedIn();

    if($logged_in_as === "loggedInAsAdmin"){
       return redirect('/users');
    }else if($logged_in_as === "loggedInAsUser"){
        return redirect('/my_subscriptions');
    }else{
         return redirect(env('WP_URL_LOGIN'));
    }

});

Route::middleware(['web', 'auth.wp'])->group(function () {

    Route::get('my_orders', [DashboardController::class,'my_orders']);
    Route::get('my_subscriptions', [DashboardController::class,'my_subscriptions']);

});

Route::middleware(['web', 'admin.wp'])->group(function () {

    Route::get('orders', [AdminController::class,'orders']);
    Route::get('posts', [AdminController::class,'posts']);
    Route::get('users', [AdminController::class,'users']);
    Route::get('products', [AdminController::class,'products']);
    Route::get('subscriptions', [AdminController::class,'subscriptions']);

});
```

========================================

**.env**
```

APP_ENV=local
APP_DEBUG=true

CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_DRIVER=sync

MAIL_DRIVER=smtp
MAIL_HOST=mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null

DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=db_f1c72f2a
DB_USERNAME=u_ae85bd26
DB_PASSWORD=46e5003cbc6ef598

WP_LOAD_PATH=/var/www/html/wordpresspetepetelocalnet
WP_URL=http://wordpresspete.petelocal.net
APP_KEY=base64:W61adEUNFhuyI86vR8QDn+2MWGZcFN49KxxmLwAAOY4=

```

========================================

**app/Models/PeteSync.php**
```php
<?php

namespace App\Models;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Http\Request;
use Log;

class PeteSync{

    public static function get_roles($wpUser){
        $wpRoles  = $wpUser['roles'] ?? []; 
        return $wpRoles;
    }

    public static function getTheWPUser(?Request $request = null)
    {
        $request ??= request();

        $cookieHeader = $request->header('Cookie', '');
        $wpSite = rtrim(env('WP_URL'), '/');
        $endpoint = "{$wpSite}/wp-json/pete/v1/admin-is-logged-in";

        $response = Http::withHeaders(['Cookie' => $cookieHeader])->get($endpoint);

        return $response->ok() ? $response->json() : false;
    }

    public static function checkTheTypeOfLoggedIn(){

        Log::info("Debugging checkTheTypeOfLoggedIn");

        $wpSite = env('WP_URL');
        $endpoint = "{$wpSite}/wp-json/pete/v1/return-user-if-logged-in";
        $request = request();

        $cookieHeader = $request->header('Cookie', '');
        $response = Http::withHeaders([
            'Cookie' => $cookieHeader,
        ])->get($endpoint);

        $wpUser = $response;
        $roles = PeteSync::get_roles($wpUser);

        Log::info($wpUser);
        Log::info($roles);

        if (($wpUser['logged_in'] == true) && in_array('administrator', $roles, true)){
            return "loggedInAsAdmin";
        }else if ((isset($wpUser)) && ($wpUser['logged_in'] == true)){ 
            return "loggedInAsUser";
        }else {
            return "notLoggedIn";
        }

    }

    public static function getTheWPUserFromMiddleware(Request $request){

        $wpSite = env('WP_URL');
        $endpoint = "{$wpSite}/wp-json/pete/v1/return-user-if-logged-in";

        $cookieHeader = $request->header('Cookie', '');
        $response = Http::withHeaders([
            'Cookie' => $cookieHeader,
        ])->get($endpoint);
        return $response;

    }

    public static function fetchFromWp(Request $request, string $resource): array
    {
        $cookie = $request->header('Cookie', '');
        $wpUrl  = rtrim(env('WP_URL'), '/');
        $url    = "{$wpUrl}/wp-json/pete/v1/{$resource}";

        try {
            $response = Http::withHeaders([
                'Cookie' => $cookie,
            ])
            // Optional: retry network hiccups automatically
            ->retry(2, 200)          // 2 attempts, 200 ms apart
            ->timeout(5)             // fail fast on slow servers
            ->get($url)
            ->throw();               // let 4xx/5xx bubble into catch block
        } catch (RequestException $e) {
            // Network error OR non-2xx status code
            Log::error('PeteSync » WP call failed', [
                'url'     => $url,
                'message' => $e->getMessage(),
                // Laravel keeps the failed response, if any
                'status'  => optional($e->response)->status(),
                'body'    => optional($e->response)->body(),
                'cookies' => str($cookie)->limit(120),
            ]);

            // Decide how you want to surface the error upstream
            // Throwing lets the controller/middleware decide:
            throw $e;
        }

        return $response->json();
    }

}
```

========================================

**app/Http/Middleware/AdminWPAuthMiddleware.php**
```php
<?php
namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Log;
use App\Models\PeteSync;

class AdminWPAuthMiddleware
{
    public function handle(Request $request, Closure $next)
    {

        $wp_user = PeteSync::getTheWPUserFromMiddleware($request);
        $roles = PeteSync::get_roles($wp_user);

        if (empty($wp_user['logged_in']) || !in_array('administrator', $roles, true)) {
           return redirect(env('WP_URL_LOGIN'));
        }

        $request->attributes->set('wp_user', $wp_user);
        $request->attributes->set('wp_roles', $roles);

        return $next($request);

    }
}

```

========================================

**app/Http/Controllers/DashboardController.php**
```php
<?php

namespace App\Http\Controllers;

use App\Standard\Generator;
use App\Standard\License;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Http\Request;
use Log;
use App\Http\Requests;
use App\Http\Controllers\Controller;
use View;
use Illuminate\Support\Facades\Http;
use App\Models\PeteSync;

class DashboardController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

	public function __construct(Request $request){
		$wordpress_url  = env('WP_URL');
		View::share(compact('wordpress_url'));
	}

	public function my_orders(Request $request){
        $roles = $request->attributes->get('wp_roles');
		$wp_user = $request->attributes->get('wp_user');
		$user_id = $wp_user['user_id'];
		$viewsw = "my_orders";
		$orders = PeteSync::fetchFromWp($request, "user-orders/$user_id");
		return view('dashboard.my_orders',compact('viewsw','orders','roles'));
	}

	public function my_subscriptions(Request $request){
		$roles = $request->attributes->get('wp_roles');
		$wp_user = $request->attributes->get('wp_user');
		$user_id = $wp_user['user_id'];
		$viewsw = "my_subscriptions";
		$subscriptions = PeteSync::fetchFromWp($request, "user-subscriptions/$user_id");
		return view('dashboard.my_subscriptions',compact('viewsw','subscriptions','roles'));
	}

	public function logout(Request $request){

		Auth::logout();
	    $url=wp_logout_url(env('WP_URL'));
		return redirect($url);

		//return Redirect::back();
	}


}

```

========================================

**app/Http/Middleware/WPAuthMiddleware.php**
```php
<?php
namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Log;
use App\Models\PeteSync;

class WPAuthMiddleware
{
    public function handle(Request $request, Closure $next)
    {
        $wp_user = PeteSync::getTheWPUserFromMiddleware($request);

        if ((! $wp_user) || empty($wp_user['logged_in'])) {
           return redirect(env('WP_URL_LOGIN'));
        }

        $roles = PeteSync::get_roles($wp_user);

        $request->attributes->set('wp_user', $wp_user);
        $request->attributes->set('wp_roles', $roles);

        return $next($request);
    }
}

```

